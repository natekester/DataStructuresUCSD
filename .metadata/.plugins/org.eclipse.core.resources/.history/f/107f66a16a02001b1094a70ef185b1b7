package assignment4;



import java.util.*;


import java.io.*;


public class is_bst_hard{
    class FastScanner {
		StringTokenizer tok = new StringTokenizer("");
		BufferedReader in;
		

		FastScanner() {
				in = new BufferedReader(new InputStreamReader(System.in));
			
		}

		String next() throws IOException {
			while (!tok.hasMoreElements())
				tok = new StringTokenizer(in.readLine());
			return tok.nextToken();
		}
	
		int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
	}

	public class TreeOrders {
		int n;
		int[] key, left, right;
		ArrayList<Integer> inOrderResult = new ArrayList<Integer>();
		ArrayList<Integer> preOrderResult = new ArrayList<Integer>();
		ArrayList<Integer> postOrderResult = new ArrayList<Integer>();
		boolean isBinTree = true;
		boolean noLines = false; 
		
		void read() throws IOException {
			FastScanner in = new FastScanner();
			n = in.nextInt();
			key = new int[n];
			left = new int[n];
			right = new int[n];
			if (n == 0) {
				noLines = true;
			}
			for (int i = 0; i < n; i++) { 
				key[i] = in.nextInt();
				left[i] = in.nextInt();
				right[i] = in.nextInt();
			
			}
		}
     
		
		public boolean inOrder() {
			
			if(noLines == true) {
				
			}
			else {
			 isBST(0, Integer.MIN_VALUE, Integer.MAX_VALUE);
			}
			return isBinTree;
		}
     
		public void isBST(int i, int min, int max) {
			// Base case. An empty tree is a BST.
			if (i == -1)
			{	return;}
			// Checking if a key is outside the permitted range.
         	try{
         	if(key[i] == key[left[i]])
            {
             isBinTree = false;
             return;
            }
            }catch(NullPointerException npe)
            {
            }
         catch(ArrayIndexOutOfBoundsException npe)
            {
            }

			if (key[i] < min)
			{	isBinTree = false;
				return ;}
			
		  if (key[i] > max) {
			  isBinTree = false;
				return ;
		  }
			// Sending in updates ranges to the right and left subtree
		  isBST(right[i], key[i], max); 
		  isBST(left[i], min, key[i]);	
		  return;
		}
	}


	
	

    static public void main(String[] args) throws IOException {
        new Thread(null, new Runnable() {
            public void run() {
                try {
                    new is_bst_hard().run();
                } catch (IOException e) {
                }
            }
        }, "1", 1 << 26).start();
    }

	public void run() throws IOException {
		TreeOrders tree = new TreeOrders();
		tree.read();
		tree.inOrder();
        if (tree.isBinTree) {
            System.out.println("CORRECT");
        } else {
            System.out.println("INCORRECT");
        }
	}
}
