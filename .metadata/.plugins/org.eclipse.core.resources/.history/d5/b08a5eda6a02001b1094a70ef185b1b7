package assignment1;


import java.util.*;
import java.io.*;

public class tree_height {
    class FastScanner {
		StringTokenizer tok = new StringTokenizer("");
		BufferedReader in;

		FastScanner() {
			in = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() throws IOException {
			while (!tok.hasMoreElements())
				tok = new StringTokenizer(in.readLine());
			return tok.nextToken();
		}
		int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
	}

    public class TreeHeight {
		int n;
		int parent[];
		
		void read() throws IOException {
			FastScanner in = new FastScanner();
			n = in.nextInt();
			parent = new int[n];
			for (int i = 0; i < n; i++) {
				parent[i] = in.nextInt();
			}
			System.out.println(parent);
		}
		
		int getn() {
			return n;
		}
		int[] getparent() {
			return parent;
		}
		
		
 int computeHeight(int n, int[] parent) {
		    
			
			// Replace this code with a faster implementation
			int height;
			//int[] nodeIn = new int[n];
			Arrays.parallelSort(parent);
			height = countDistinct(parent, n);
			
			
			return height;
			
			
//			int maxHeight = 0;
//			for (int vertex = 0; vertex < n; vertex++) {
//				int height = 0;
//				for (int i = vertex; i != -1; i = parent[i])
//					height++;
//				maxHeight = Math.max(maxHeight, height);
//			}
//			return maxHeight;
		}
 
 int checkHeight(int n, int[] parent) {
	    

		int maxHeight = 0;
		for (int vertex = 0; vertex < n; vertex++) {
			int height = 0;
			for (int i = vertex; i != -1; i = parent[i])
				height++;
			maxHeight = Math.max(maxHeight, height);
		}
		return maxHeight;
	}
		
 int countDistinct(int arr[], int n)  
	    { 
	        // First sort the array so that all 
	        // occurrences become consecutive 
	        Arrays.sort(arr); 
	  
	        // Traverse the sorted array 
	        int res = 0; 
	        for (int i = 0; i < n; i++)  
	        { 
	  
	            // Move the index ahead while 
	            // there are duplicates 
	            while (i < n - 1 &&  
	                    arr[i] == arr[i + 1]) 
	            { 
	                i++; 
	            } 
	            res++; 
	        } 
	        return res; 
	    } 
		

	}

	static public void main(String[] args) throws IOException {
            new Thread(null, new Runnable() {
                    public void run() {
                        try {
                            new tree_height().run();
                        } catch (IOException e) {
                        }
                    }
                }, "1", 1 << 26).start();
	}
	public void run() throws IOException {
		TreeHeight tree = new TreeHeight();
		tree.read();
		System.out.println(tree.computeHeight(tree.n, tree.parent));
	}
}


